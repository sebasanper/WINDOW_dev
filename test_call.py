import call_workflow_once as wf
from joblib import Parallel, delayed
from random import choice, randint

fitness = wf.score_median_workflow
# Initialization
def gen_individual():
    state = [0.0 for _ in range(13)]
    state[2] = choice([1.0, 2.0, 5.0, 10.0, 15.0, 30.0, 60.0, 90.0, 120.0, 180.0])
    for a in range(13):
        make_vector(state, a)
    return state

def make_vector(state, a):
    if a == 0:
        state[a] = randint(2, 25)
    elif a == 1:
        state[1] = 0.0
        while state[a] < state[2]:
            state[a] = choice([30.0, 60.0, 90.0, 120.0, 180.0])
    elif a == 2:
        state[2] = 190.0
        while state[a] > state[1]:
            state[a] = choice([1.0, 2.0, 5.0, 10.0, 15.0, 30.0, 60.0, 90.0, 120.0, 180.0])
    elif a == 3:
        state[a] = randint(1, 2)
    elif a == 4:
        state[a] = randint(0, 2)
    elif a == 5:
        state[a] = randint(1, 5)
    elif a == 6:
        state[a] = randint(1, 3)
    elif a == 7:
        state[a] = randint(0, 3)
    elif a == 8:
        state[a] = randint(1, 3)
    elif a == 9:
        state[a] = randint(1, 4)
    elif a == 10:
        state[a] = randint(1, 3)
    elif a == 11:
        state[a] = randint(1, 1)
    elif a == 12:
        state[a] = randint(1, 1)
def gen_population(n_indiv):
    return [gen_individual() for _ in range(n_indiv)]

pop_size = 5

solution = gen_population(pop_size)

def functions(x):
    lcoe, time = fitness(x)
    return - lcoe, - time


a = Parallel(n_jobs=-2)(delayed(functions)(solution[i]) for i in range(pop_size))
print(a)
a1 = [item[0] for item in a]
a2 = [item[1] for item in a]

print(a2)

[3, 180.0, 180.0, 2, 2, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 2.0, 2, 0, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 180.0, 2, 2, 3, 1, 2, 3, 2, 3, 1, 1] [21, 180.0, 2.0, 2, 2, 3, 1, 1, 3, 2, 3, 1, 1] [21, 180.0, 2.0, 2, 0, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 2.0, 2, 0, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 180.0, 2, 2, 3, 1, 2, 3, 2, 3, 1, 1] [12, 180.0, 10.0, 2, 2, 1, 3, 1, 3, 1, 2, 1, 1] [3, 180.0, 180.0, 2, 2, 1, 1, 1, 3, 1, 3, 1, 1] [12, 180.0, 10.0, 2, 2, 1, 1, 2, 3, 2, 3, 1, 1] [3, 180.0, 180.0, 2, 2, 1, 1, 1, 3, 2, 3, 1, 1] [12, 180.0, 10.0, 2, 2, 1, 3, 1, 3, 1, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 1, 1, 1, 3, 1, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 3, 1, 1, 3, 1, 3, 1, 1] [12, 180.0, 10.0, 2, 2, 1, 1, 2, 3, 2, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 3, 1, 1, 3, 1, 3, 1, 1] [3, 180.0, 180.0, 2, 2, 1, 1, 1, 3, 1, 3, 1, 1] [3, 180.0, 180.0, 2, 2, 3, 1, 1, 3, 1, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 3, 1, 1, 3, 1, 3, 1, 1] [12, 180.0, 10.0, 2, 2, 1, 3, 1, 3, 1, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 3, 1, 2, 3, 2, 3, 1, 1] [21, 30.0, 1.0, 1, 2, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 1.0, 1, 2, 3, 1, 1, 3, 1, 2, 1, 1] [3, 180.0, 180.0, 2, 2, 1, 1, 1, 3, 1, 3, 1, 1] [3, 180.0, 180.0, 2, 2, 1, 1, 1, 3, 2, 3, 1, 1] [21, 30.0, 1.0, 2, 2, 3, 1, 2, 3, 2, 3, 1, 1] [21, 180.0, 2.0, 2, 2, 1, 3, 1, 3, 1, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 2.0, 2, 2, 3, 1, 1, 3, 1, 2, 1, 1] [21, 30.0, 1.0, 2, 2, 3, 1, 1, 3, 1, 3, 1, 1] [12, 180.0, 10.0, 2, 2, 1, 1, 2, 3, 2, 3, 1, 1] [3, 180.0, 180.0, 2, 2, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 2.0, 2, 2, 3, 1, 1, 3, 2, 3, 1, 1] [12, 30.0, 1.0, 1, 0, 3, 1, 1, 3, 1, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 2.0, 2, 0, 3, 1, 1, 3, 1, 3, 1, 1] [3, 180.0, 180.0, 2, 2, 3, 1, 1, 3, 1, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 1, 1, 1, 3, 1, 3, 1, 1] [12, 180.0, 10.0, 2, 2, 1, 3, 1, 3, 2, 3, 1, 1] [3, 180.0, 180.0, 2, 2, 1, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 2.0, 2, 0, 3, 1, 2, 3, 2, 3, 1, 1] [21, 180.0, 180.0, 2, 2, 1, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 1.0, 2, 0, 5, 2, 3, 3, 2, 3, 1, 1] [21, 180.0, 2.0, 2, 0, 3, 1, 1, 3, 1, 3, 1, 1] [21, 180.0, 180.0, 2, 0, 3, 1, 1, 3, 1, 3, 1, 1] [3, 180.0, 180.0, 2, 2, 1, 1, 1, 3, 1, 2, 1, 1] [21, 180.0, 2.0, 2, 2, 3, 1, 1, 3, 1, 2, 1, 1] [3, 180.0, 180.0, 2, 2, 3, 1, 1, 3, 1, 2, 1, 1] [21, 30.0, 1.0, 1, 0, 3, 1, 1, 3, 2, 3, 1, 1] [21, 30.0, 1.0, 1, 0, 3, 1, 1, 3, 1, 3, 1, 1]
